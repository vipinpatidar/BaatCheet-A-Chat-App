# specify the version of docker-compose
version: "3.8"

# define the services/containers to be run
services:
  # define the frontend service
  # we can use any name for the service. A standard naming convention is to use "web" for the frontend
  web:
    # we use depends_on to specify that service depends on another service
    # in this case, we specify that the web depends on the Server service
    # this means that the Server service will be started before the web service
    depends_on:
      - server
    # specify the build context for the web service
    # this is the directory where the Dockerfile for the web service is located
    build: ./Client
    # specify the ports to expose for the web service
    # the first number is the port on the host machine
    # the second number is the port inside the container
    ports:
      - 5173:5173
    # specify the environment variables for the web service
    # these environment variables will be available inside the container
    env_file:
      - ./Client/.env

      # add a .env file in the Client directory with envrioment variables like
      #VITE_ENDPOINT=http://localhost:3000
      #VITE_CLOUD_NAME=your cloudinary cloud name
      #VITE_UPLOAD_PRESET=your cloudinary upload preset

    # this is for docker compose watch mode
    # anything mentioned under develop will be watched for changes by docker compose watch and it will perform the action mentioned
    develop:
      # we specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container if there are any changes
        - path: ./Client/package.json
          action: rebuild
        - path: ./Client/package-lock.json
          action: rebuild
        # it'll watch for changes in the Client directory and sync the changes with the container real time
        - path: ./Client
          target: /app
          action: sync

  # define the server service/container
  server:
    # api service depends on the db service so the db service will be started before the server service
    depends_on:
      - db

    # specify the build context for the server service
    build: ./Server

    # specify the ports to expose for the Server service
    # the first number is the port on the host machine
    # the second number is the port inside the container
    ports:
      - 3000:3000

    # specify environment variables for the Server service
    # for demo purposes, we're using a local mongodb instance
    env_file:
      - ./Server/.env

      # add a .env file in the Server directory with envrioment variables like
      #PORT=3000
      #MONGODB_URL=your mongodb url
      #ACCESS_TOKEN_SECRET=jwt secret key

    # establish docker compose watch mode for the Server service
    develop:
      # specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container and image if there are any changes
        - path: ./Server/package.json
          action: rebuild
        - path: ./Server/package-lock.json
          action: rebuild

        # it'll watch for changes in the Server directory and sync the changes with the container real time
        - path: ./Server
          target: /app
          action: sync

  # define the db service
  db:
    # specify the image to use for the db service from docker hub. If we have a custom image, we can specify that in this format
    # In the above two services, we're using the build context to build the image for the service from the Dockerfile so we specify the image as "build: ./frontend" or "build: ./backend".
    # but for the db service, we're using the image from docker hub so we specify the image as "image: mongo:latest"
    # you can find the image name and tag for mongodb from docker hub here: https://hub.docker.com/_/mongo
    image: mongo:latest

    # specify the ports to expose for the db service
    # generally, we do this in Server service using mongodb atlas. But for demo purposes, we're using a local mongodb instance
    # usually, mongodb runs on port 27017. So we're exposing the port 27017 on the host machine and mapping it to the port 27017 inside the container
    ports:
      - 27017:27017

    # specify the volumes to mount for the db service
    # we're mounting the volume named "chatDB" inside the container at /data/db directory
    # this is done so that the data inside the mongodb container is persisted even if the container is stopped
    volumes:
      - chatDB:/data/db

# define the volumes to be used by the services
volumes:
  chatDB:
